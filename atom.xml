<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>一些笔记</title>
  <icon>https://www.gravatar.com/avatar/6d35f0f5c411bd4bdcc3af3d396e3c53</icon>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://sw5cc.com/"/>
  <updated>2018-06-17T13:13:14.529Z</updated>
  <id>https://sw5cc.com/</id>
  
  <author>
    <name>sw5cc</name>
    <email>sw5cc.125pflops@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>programming art</title>
    <link href="https://sw5cc.com/2018/06/17/programming-art/"/>
    <id>https://sw5cc.com/2018/06/17/programming-art/</id>
    <published>2018-06-17T12:49:23.000Z</published>
    <updated>2018-06-17T13:13:14.529Z</updated>
    
    <content type="html"><![CDATA[<h2 id="王选《软件设计方法》"><a href="#王选《软件设计方法》" class="headerlink" title="王选《软件设计方法》"></a>王选《软件设计方法》</h2><p>第一章 结构程序设计的发展</p><ul><li>软件生存期</li><li>软件开发和维护中存在的问题</li><li>好程序的标准</li><li>结构程序设计的发展历史</li><li>结构程序设计的主要内容<ul><li>限制使用 GO TO 语句</li><li>逐步求精的设计方法</li><li>自顶向下的设计，编码和调试</li><li>主程序员组的组织形式</li></ul></li><li>把非结构化程序变成结构化程序<ul><li>Mills 方法</li><li>应用 Mills 方法的例子</li><li>状态变量法</li></ul></li><li>软件设计的工具<ul><li>结构化的流程图</li><li>Chapin 图</li><li>Yourdon 的结构图</li><li>伪代码</li><li>Jackson 结构图解和概要逻辑</li><li>Warnier 图解</li></ul></li></ul><p>第二章 基于数据结构的 Jackson 设计方法</p><ul><li>一个例子说明程序结构的重要性</li><li>程序结构应该基于数据结构</li><li>基本设计方法</li><li>串联输入文件的读入方法<ul><li>串联输入文件的一个例子</li><li>预先读</li><li>处理输入文件的又一例子</li></ul></li><li>多个数据结构<ul><li>结构对应</li><li>整理</li></ul></li><li>错误数据的处理</li><li>回溯方法<ul><li>预先读多个记录</li><li>先假设后验证的回溯方法</li><li>先假设后验证所带来的副作用</li></ul></li><li>结构冲突<ul><li>次序冲突</li><li>边界冲突</li></ul></li><li>程序转换<ul><li>增加中间文件后带来的问题</li><li>程序转换</li><li>在不修改编译系统的前提下进行程序转换的方法</li><li>转换了的程序与调用程序之间的控制信息传递</li></ul></li></ul><p>第三章 Warnier 的 LCP 方法</p><ul><li>判定表<ul><li>判定表的形式和优点</li><li>判定表的简化和 ELSE 列</li><li>把判定表转换为程序</li><li>用判定表表示程序算法流程</li></ul></li><li>Warnier 的 LCP 方法</li><li>LCP 方法的程序检查和调试<ul><li>程序和正确性检查</li><li>程序的调试</li></ul></li><li>LCP 方法的程序修改</li><li>LCP 方法和 Jackson 方法的比较</li></ul><p>第四章 Yourdon 的结构化设计方法</p><ul><li>耦合<ul><li>模块的耦合对系统复杂程度的影响</li><li>影响耦合的因素</li><li>公共环境的耦合</li><li>内容耦合</li></ul></li><li>内聚</li><li>模块类型和系统结构方面的问题<ul><li>模块类型</li><li>系统结构方面的一些问题</li></ul></li><li>基于数据流图的设计步骤<ul><li>以变换为中心的系统的结构设计步骤</li><li>一个例子– 病人监督程序</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;王选《软件设计方法》&quot;&gt;&lt;a href=&quot;#王选《软件设计方法》&quot; class=&quot;headerlink&quot; title=&quot;王选《软件设计方法》&quot;&gt;&lt;/a&gt;王选《软件设计方法》&lt;/h2&gt;&lt;p&gt;第一章 结构程序设计的发展&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;软件生存期&lt;/li&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>cpp-primer</title>
    <link href="https://sw5cc.com/2018/06/04/cpp-primer/"/>
    <id>https://sw5cc.com/2018/06/04/cpp-primer/</id>
    <published>2018-06-04T15:18:10.000Z</published>
    <updated>2018-06-05T14:55:57.146Z</updated>
    
    <content type="html"><![CDATA[<p>第一章 开始</p><ul><li>编写一个简单的C++程序<ul><li>编译、运行程序</li></ul></li><li>初识输入输出</li><li>注释简介</li><li>控制流<ul><li>while语句</li><li>for语句</li><li>读取数量不定的输入数据</li><li>if语句</li></ul></li><li>类简介<ul><li>Sales_item类</li><li>初识成员函数</li></ul></li><li>书店程序</li><li>小结</li><li>术语表</li></ul><p>第二章 变量和基本类型</p><ul><li>基本内置类型<ul><li>算术类型</li><li>类型转换</li><li>字面值常量</li></ul></li><li>变量<ul><li>变量定义</li><li>变量声明和定义的关系</li><li>标识符</li><li>名字和作用域</li></ul></li><li>复合类型<ul><li>引用</li><li>指针</li><li>理解复合类型的声明</li></ul></li><li>const限定符<ul><li>const的引用</li><li>指针和const</li><li>顶层const</li><li>constexpr和常量表达式</li></ul></li><li>处理类型<ul><li>类型别名</li><li>auto类型说明符</li><li>decltype类型指示符</li></ul></li><li>自定义数据结构<ul><li>定义Sales_data类型</li><li>使用Sales_data类型</li><li>编写自己的头文件</li></ul></li><li>小结</li><li>术语表</li></ul><p>第三章 字符串、向量和数组</p><ul><li>命名空间的using声明</li><li>标准库类型string<ul><li>定义和初始化string对象</li><li>string对象上的操作</li><li>处理string对象中的字符</li></ul></li><li>标准库类型vector<ul><li>定义和初始化vector对象</li><li>向vector对象添加元素</li><li>其他vetor操作</li></ul></li><li>迭代器介绍<ul><li>使用迭代器</li><li>迭代器运算</li></ul></li><li>数组<ul><li>定义和初始化内置数组</li><li>访问数组元素</li><li>指针和数组</li><li>C风格字符串</li><li>与旧代码的接口</li></ul></li><li>多维数组</li><li>小结</li><li>术语表</li></ul><p>第四章 表达式</p><ul><li>基础<ul><li>基本概念</li><li>优先级与结合律</li><li>求值顺序</li></ul></li><li>算术运算符</li><li>逻辑和关系运算符</li><li>赋值运算符</li><li>递增和递减运算符</li><li>成员访问运算符</li><li>条件运算符</li><li>位运算符</li><li>sizeof运算符</li><li>逗号运算符</li><li>类型转换<ul><li>算术转换</li><li>其他隐式类型转换</li><li>显示转换</li></ul></li><li>运算符优先级表</li><li>小结</li><li>术语表</li></ul><h2 id="第五章-语句"><a href="#第五章-语句" class="headerlink" title="第五章 语句"></a>第五章 语句</h2><ul><li>简单语句</li><li>语句作用域</li><li>条件语句<ul><li>if语句</li><li>switch语句</li></ul></li><li>迭代语句<ul><li>while语句</li><li>传统的for语句</li><li>范围for语句</li><li>do while语句</li></ul></li><li>跳转语句<ul><li>break语句</li><li>continue语句</li><li>goto语句</li></ul></li><li>try语句块和异常处理<ul><li>throw表达式</li><li>try语句块</li><li>标准异常</li></ul></li><li>小结</li><li>术语表</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;第一章 开始&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;编写一个简单的C++程序&lt;ul&gt;
&lt;li&gt;编译、运行程序&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;初识输入输出&lt;/li&gt;
&lt;li&gt;注释简介&lt;/li&gt;
&lt;li&gt;控制流&lt;ul&gt;
&lt;li&gt;while语句&lt;/li&gt;
&lt;li&gt;for语句&lt;/l
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>C/C++ io system</title>
    <link href="https://sw5cc.com/2018/06/03/C-C-io-system/"/>
    <id>https://sw5cc.com/2018/06/03/C-C-io-system/</id>
    <published>2018-06-03T04:23:07.000Z</published>
    <updated>2018-06-05T12:14:29.145Z</updated>
    
    <content type="html"><![CDATA[<p>C/C++ 输入输出系统</p><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><ul><li>逐行</li></ul><p>通过 getline<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// stdio</span></span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="keyword">while</span>(getline(<span class="built_in">cin</span>, s))</span><br><span class="line"></span><br><span class="line"><span class="comment">// file</span></span><br><span class="line"><span class="function">ifstream <span class="title">is</span><span class="params">(<span class="string">"abc.txt"</span>)</span></span>;</span><br><span class="line"><span class="keyword">while</span>(getline(is, s))</span><br></pre></td></tr></table></figure></p><p>通过 fgets<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// stdio</span></span><br><span class="line"><span class="built_in">scanf</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// file</span></span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">128</span>];</span><br><span class="line">file =fopen(<span class="string">"abc.txt"</span>,<span class="string">"r"</span>);</span><br><span class="line"><span class="keyword">while</span> (fgets(buf,<span class="number">128</span>, file)!=<span class="literal">NULL</span>)</span><br></pre></td></tr></table></figure></p><p>通过 fgetc<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></p><ul><li>逐词</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// cin</span></span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; s)</span><br><span class="line"></span><br><span class="line"><span class="comment">// getline -&gt; stringstream</span></span><br><span class="line"><span class="keyword">while</span>(getline(<span class="built_in">cin</span>, s))</span><br><span class="line"><span class="built_in">std</span>::<span class="function"><span class="built_in">istringstream</span> <span class="title">iss</span><span class="params">(s)</span></span>;</span><br><span class="line">iss &gt;&gt; a &gt;&gt; b;</span><br></pre></td></tr></table></figure><ul><li>逐位（二进制）</li></ul><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><ul><li>逐行</li><li>逐词</li><li>逐位</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>参考链接<br><a href="https://stackoverflow.com/questions/7868936/read-file-line-by-line" target="_blank" rel="noopener">https://stackoverflow.com/questions/7868936/read-file-line-by-line</a><br><a href="https://stackoverflow.com/questions/3910326/c-read-file-line-by-line-then-split-each-line-using-the-delimiter" target="_blank" rel="noopener">https://stackoverflow.com/questions/3910326/c-read-file-line-by-line-then-split-each-line-using-the-delimiter</a><br><a href="https://stackoverflow.com/questions/3081289/how-to-read-a-line-from-a-text-file-in-c-c" target="_blank" rel="noopener">https://stackoverflow.com/questions/3081289/how-to-read-a-line-from-a-text-file-in-c-c</a></p><p>函数列表<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>()      <span class="comment">// Print a formatted string to stdout.</span></span><br><span class="line"><span class="built_in">scanf</span>()       <span class="comment">// Read formatted data from stdin.</span></span><br><span class="line"><span class="built_in">putchar</span>()     <span class="comment">// Print a single character to stdout.</span></span><br><span class="line">getchar()     <span class="comment">// Read a single character from stdin.</span></span><br><span class="line"><span class="built_in">puts</span>()        <span class="comment">// Print a string to stdout.</span></span><br><span class="line">gets()        <span class="comment">// Read a line from stdin.</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;C/C++ 输入输出系统&lt;/p&gt;
&lt;h2 id=&quot;输入&quot;&gt;&lt;a href=&quot;#输入&quot; class=&quot;headerlink&quot; title=&quot;输入&quot;&gt;&lt;/a&gt;输入&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;逐行&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过 getline&lt;br&gt;&lt;figure class
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>浅析Unicode, Font及其应用</title>
    <link href="https://sw5cc.com/2018/06/02/Unicode-Font-Application/"/>
    <id>https://sw5cc.com/2018/06/02/Unicode-Font-Application/</id>
    <published>2018-06-02T06:04:20.000Z</published>
    <updated>2018-06-02T11:14:55.579Z</updated>
    
    <content type="html"><![CDATA[<p>浅析Unicode，Font及其应用</p><p><strong>NOTICE: 修订中/WIP（文章可能存在错误）</strong></p><h2 id="Unicode"><a href="#Unicode" class="headerlink" title="Unicode"></a>Unicode</h2><ul><li>是什么<br>Unicode是一个标准，用来确定书写文字信息的统一处理。</li><li>结构<br>通过定义code points来一一对应字符及其在计算机内的抽象编号；<br>通过code plane来将points分层；<br>所有的points都在codespace中。</li><li>具体编码实现分类<br>UTF-8, UTF-16, and UTF-32<br>分类的标准是依据一个实现在计算机中所占用的BYTE数量；<br>这三个默认都是little endian，UTF-16, UTF-32还有big endian版本；<br>UTF-8 是可变的，标准ascii码使用一个BYTE，而复杂的使用多个BYTE；<br>UTF-16 是可变的，字符采用多个BYTE (&gt;=2)；<br>UTF-32 是固定长度，所有字符采用四个BYTE；<br>UTF-8优点：兼容ASCII,避免了BOM，和大小端，节约资源，是网络传输，API设计时优先考虑的编码。<br>其他 BOM, UCS, UCS-2, UCS-4是什么？<br>BOM 是 UCS-2 和 UTF-16用来指定字节序的一个标志位；也可以用来区分UTF-8和本地8bit code page；<br>UCS* 是其他编码的基础，其他编码可以以此来扩展。<br>UCS 是只用一个BYTE来描述，代表作UTF-8<br>UCS-2 是固定长度，有限的支持Unicode，first plane；<br>UCS-4 是固定长度，支持所有Unicode。</li><li>其他编码<br>常用中文编码：GB18030，GB2312，BIG5</li><li>设计程序时需要考虑的编码问题<ul><li>输入法文本框， 路径，文件名编码<br>Windows NT系统默认编码是UTF-16，所以GetWindowText，路径，文件名和IME的编码都是UTF-16。<br>linux系统一般采用UTF-8。<br>所以在使用fopen等访问系统文件时，需要考虑编码问题。</li><li>文件编码，及其字符串编码<br>在C++中，但我们使用””定义字符串时，字符串会以文件的encoding格式编码。</li><li>如何选择最合适的编码<br>目前，一般底层使用UTF-8兼容ASCII，C/C++并没有指定字符串默认编码，但实际实现时，一般是ASCII或者UTF-8；未来也可以改进全面使用UTF-16/UTF-32，宽字节消耗空间大，但是能更容易实现unicode。UTF-8在传输时是优先选项。</li><li>检测编码的办法</li><li>不同类型的编码及其相互的转换<br>ANSI/UTF-8  -&gt;  UTF-16<br>Windows上使用 MultiByteToWideChar<br>UTF-16 -&gt; UTF-32<br>映射即可</li><li>设计i18n程序<br>合理的i18n程序，编码应该选择UTF-16，与其他程序交互的接口应该采用UTF-8，现在unicode还有emoji表情，所以无论是数据库持久化，UI显示还是中间层计算都应该是unicode友好型。 </li></ul></li><li>参考链接</li><li>相关工具</li></ul><h2 id="Font"><a href="#Font" class="headerlink" title="Font"></a>Font</h2><ul><li>是什么<br>字体Font是一个文件，描述了字形glyph及其与unicode code point的对应关系。</li><li>结构<br>不同格式的字体有不同的组成；<br>ttf/otf 共同的有，cmap，head, hhea, hmtx, maxp, name, glyf。</li><li>标准<br>OpenType, TrueType, </li><li>字体和unicode<br>字体中一个glyph对应一个code point。</li><li>字体和编码关系<br>字体和具体的编码没有关系</li><li>如何选择合适的字体<br>没有字体可以包含所有的unicode字符，所以要根据不同的用途选择不同的字体。</li><li>如何设计字体<br>有很多实用的工具</li><li>参考链接<ul><li><a href="https://msdn.microsoft.com/en-us/library/windows/desktop/dd144827(v=vs.85).aspx" target="_blank" rel="noopener">https://msdn.microsoft.com/en-us/library/windows/desktop/dd144827(v=vs.85).aspx</a></li><li><a href="https://docs.microsoft.com/en-us/typography/opentype/spec/" target="_blank" rel="noopener">https://docs.microsoft.com/en-us/typography/opentype/spec/</a></li><li><a href="https://simoncozens.github.io/fonts-and-layout/opentype.html" target="_blank" rel="noopener">https://simoncozens.github.io/fonts-and-layout/opentype.html</a></li><li><a href="http://scripts.sil.org/cms/scripts/page.php?site_id=nrsi&amp;id=iws-chapter08" target="_blank" rel="noopener">http://scripts.sil.org/cms/scripts/page.php?site_id=nrsi&amp;id=iws-chapter08</a></li><li><a href="https://en.wikipedia.org/wiki/Computer_font" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Computer_font</a></li></ul></li><li>相关工具<ul><li><a href="https://www.fontmaster.nl/" target="_blank" rel="noopener">https://www.fontmaster.nl/</a></li><li><a href="https://en.wikipedia.org/wiki/Font_editor" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Font_editor</a></li></ul></li></ul><h2 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h2><ul><li>Windows系统中容易混淆的概念<br>记事本中的 ANSI, UNICODE。ANSI是指当前locale下的encoding，不是ASCII。UNICODE 是指UTF-16+BOM。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;浅析Unicode，Font及其应用&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTICE: 修订中/WIP（文章可能存在错误）&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;Unicode&quot;&gt;&lt;a href=&quot;#Unicode&quot; class=&quot;headerlink&quot; title=&quot;Un
      
    
    </summary>
    
    
      <category term="unicode" scheme="https://sw5cc.com/tags/unicode/"/>
    
  </entry>
  
  <entry>
    <title>xi-qt 未来计划</title>
    <link href="https://sw5cc.com/2018/03/13/xi-qt-%E6%9C%AA%E6%9D%A5%E8%AE%A1%E5%88%92/"/>
    <id>https://sw5cc.com/2018/03/13/xi-qt-未来计划/</id>
    <published>2018-03-13T09:10:44.000Z</published>
    <updated>2018-03-14T12:18:19.633Z</updated>
    
    <content type="html"><![CDATA[<p>现在的xi-qt还只是一个HelloWorld级别的实现，这里做一些计划，一步一步来，争取到年底的时候这个xi-qt要基本满足编程使用。</p><p>修订日期： 2018年3月14日</p><h1 id="设计（程序结构）"><a href="#设计（程序结构）" class="headerlink" title="设计（程序结构）"></a>设计（程序结构）</h1><p>数据处理层</p><ul><li>通过JOSN-RPC从core获取linecache，抽象的line</li><li>Core &lt;–(json-rpc)–&gt; LineCache</li></ul><p>渲染BITMAP层</p><ul><li>把抽象的line转换为显示模型中以cell为基本的screen中的实际ViewLine(包含wrap)，生成BITMAP(引入skia库硬件加速)</li><li>LineCache &lt;–(Cell)–&gt; EditorModel</li></ul><p>呈现与交互层</p><ul><li>这一层开始处理滚动与缩放，与用户点击，拖动选择，输入点闪烁等功能，</li><li>通过tile等技术完成局部绘制等，通过多线程延时渲染可以解决快速拖动时页面卡顿。</li><li>EditorModel &lt;–(Input/Display)–&gt; EditorView</li></ul><h1 id="第三方库"><a href="#第三方库" class="headerlink" title="第三方库"></a>第三方库</h1><p>skia</p><h1 id="具体计划"><a href="#具体计划" class="headerlink" title="具体计划"></a>具体计划</h1><p>上半年把项目推进到和xi-mac一个完成度，也就是除了效率问题，其他都要可以用；<br>下半年重点在改进页面渲染。</p><h1 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h1><p>最近在看LCUI代码，写的真好，以后要把xi-qt的代码也写的这样才行。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;现在的xi-qt还只是一个HelloWorld级别的实现，这里做一些计划，一步一步来，争取到年底的时候这个xi-qt要基本满足编程使用。&lt;/p&gt;
&lt;p&gt;修订日期： 2018年3月14日&lt;/p&gt;
&lt;h1 id=&quot;设计（程序结构）&quot;&gt;&lt;a href=&quot;#设计（程序结构）&quot; cl
      
    
    </summary>
    
      <category term="Code" scheme="https://sw5cc.com/categories/Code/"/>
    
    
      <category term="Qt" scheme="https://sw5cc.com/tags/Qt/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://sw5cc.com/2018/03/13/hello-world/"/>
    <id>https://sw5cc.com/2018/03/13/hello-world/</id>
    <published>2018-03-13T07:16:54.341Z</published>
    <updated>2018-03-13T07:16:54.342Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
